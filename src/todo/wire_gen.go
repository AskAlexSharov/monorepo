// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/globalsign/mgo"
	"github.com/google/go-cloud/requestlog"
	"github.com/google/go-cloud/runtimevar"
	"github.com/google/go-cloud/runtimevar/filevar"
	"github.com/google/go-cloud/server"
	"github.com/grpc-ecosystem/go-grpc-middleware"
	"github.com/grpc-ecosystem/go-grpc-middleware/recovery"
	"github.com/grpc-ecosystem/go-grpc-middleware/tags"
	"github.com/grpc-ecosystem/go-grpc-prometheus"
	"github.com/pkg/errors"
	"github.com/urfave/cli"
	"go.opencensus.io/trace"
	"google.golang.org/grpc"
	"time"
)

// Injectors from inject_local.go:

func setupLocal(ctx *cli.Context) (*application, func(), error) {
	logger := _wireLoggerValue
	session, err := localDb(ctx)
	if err != nil {
		return nil, nil, err
	}
	v, cleanup := appHealthChecks(session)
	exporter := _wireExporterValue
	sampler := trace.AlwaysSample()
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         logger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		DefaultSamplingPolicy: sampler,
		Driver:                defaultDriver,
	}
	serverServer := server.New(options)
	grpcServer := localGrpc(ctx)
	variable, cleanup2, err := localRuntimeVar(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mainApplication := newApplication(serverServer, session, grpcServer, variable)
	return mainApplication, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireLoggerValue        = requestlog.Logger(nil)
	_wireExporterValue      = trace.Exporter(nil)
	_wireDefaultDriverValue = &server.DefaultDriver{}
)

// inject_local.go:

func localDb(ctx *cli.Context) (*mgo.Session, error) {
	addr := mongoAddr(ctx)
	sess, err := mgo.Dial(addr)
	if err != nil {
		return nil, errors.New("Can't connect to Mongo on address: " + addr + ", by reason: " + err.Error())
	}
	return sess, nil
}

func localGrpc(ctx *cli.Context) *grpc.Server {
	return grpc.NewServer(grpc.StreamInterceptor(grpc_middleware.ChainStreamServer(grpc_ctxtags.StreamServerInterceptor(grpc_ctxtags.WithFieldExtractor(grpc_ctxtags.CodeGenRequestFieldExtractor)), grpc_prometheus.StreamServerInterceptor, grpc_recovery.StreamServerInterceptor(grpc_recovery.WithRecoveryHandler(panicHandler)))), grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(grpc_ctxtags.UnaryServerInterceptor(grpc_ctxtags.WithFieldExtractor(grpc_ctxtags.CodeGenRequestFieldExtractor)), grpc_prometheus.UnaryServerInterceptor, grpc_recovery.UnaryServerInterceptor(grpc_recovery.WithRecoveryHandler(panicHandler)))),
	)
}

// localRuntimeVar is a Wire provider function that returns the Message of the
// Day variable based on a local file.
func localRuntimeVar(ctx *cli.Context) (*runtimevar.Variable, func(), error) {
	v, err := filevar.New("message_of_the_day", runtimevar.StringDecoder, &filevar.Options{
		WaitDuration: time.Minute,
	})
	if err != nil {
		return nil, nil, err
	}
	return v, func() { v.Close() }, nil
}
